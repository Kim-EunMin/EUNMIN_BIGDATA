annotate("segment",x=2.5, xend = 3,
y=10, yend=17, color = "red",
arrow = arrow() )        #arrow 는 화살표 모양으로 보여지게 해줌
ggplot( mtcars, aes(x = wt, y=mpg) ) +
geom_point() +
annotate( "rect",
xmin=3,
xmax=4,
ymin=12,
ymax=21,
alpha = 0.5,
fill = "skyblue" ) +
annotate("segment",x=2.5, xend = 3.7,
y=10, yend=17, color = "red")
ggplot( mtcars, aes(x = wt, y=mpg) ) +
geom_point() +
annotate( "rect",
xmin=3,
xmax=4,
ymin=12,
ymax=21,
alpha = 0.5,
fill = "skyblue" ) +
annotate("segment",x=2.5, xend = 3.7,
y=10, yend=17, color = "red",
arrow = arrow() )
ggplot( mtcars, aes(x = wt, y=mpg) ) +
geom_point() +
annotate( "rect",
xmin=3,
xmax=4,
ymin=12,
ymax=21,
alpha = 0.5,
fill = "skyblue" ) +
annotate("segment",x=2.5, xend = 3.7,
y=10, yend=17, color = "red",
arrow = arrow() )   +
annotate("text", x=2.5, y=10,
label= "point" )
#treemap
install.packages("treemap")
library(treemap)
data( GNI2014 )
dim( GNI2014 )
str(GNI2014)
head(GNI2014)
GNI2014
treemap( GNI2014,
index = c("continent" , "iso3"),    # 계층구조         #GNI2014 를 continet(e대륙) a밑에 iso3(국가)  로 계층화해라
vSize = "population",               # 타일 크기         # 타일 사이즈를 인구로 하겠다 ( 인구많으면 타일크기 크다)
vColor = "GNI",                     # 타일 컬러         #색상은 GNI (총생산)로 해라 ( 진하면 총생산 높다, 연하면 총생산 낮다)
type = "value",                     # 타일 컬러링 방법    # 값에 의해 타일 색을 정해라
bg.labels = "yellow",               #레이블 배경색
title = "World's GNI" )
st <- data.frame(state.x77)
st <- data.frame(st, stname=rownames(st))
st
head(st)
st <- data.frame(state.x77)
st
treemap(st,
index=c("stname"),
vSize="Area",
vColor="Income",
type="value",
title="미국 주별 수입")
st <- data.frame(state.x77)
st
st <- data.frame(st, stname=rownames(st))
head(st)
treemap(st,
index=c("stname"),
vSize="Area",
vColor="Income",
type="value",
title="미국 주별 수입")
#https://www.r-graph-gallery.com/index.html
#ggplot 으로 버블차트 그리기
# Libraries
library(ggplot2)
symbols ( st$Illiteracy, st$Murder,        #원의 x,y 좌표
circles = st$Population,         #원의 반지름      (인구수가 반지름이 된다)
inches=0.3,                      #원크기 조절값
fg="white",                      #원 테두리 색
bg="Lightgray",                  #원 바탕색
lwd=1.5,                         # 원 테두리선 두께
xlab="rate of Illiteracy",
ylab="crime(murder) rate",
main="Illiteracy and Crime")
text(st$Illiteracy, st$Murder,           #텍스트출력 x,y 좌표
rownames(st),                       #출력할 text
cex=0.6,                            #폰트크기
col="brown")                        #폰트컬러
symbols ( st$Illiteracy, st$Murder,        #원의 x,y 좌표
circles = st$Population,         #원의 반지름      (인구수가 반지름이 된다)
inches=0.3,                      #원크기 조절값
fg="white",                      #원 테두리 색
bg="Lightgray",                  #원 바탕색
lwd=1.5,                         # 원 테두리선 두께
xlab="rate of Illiteracy",
ylab="crime(murder) rate",
main="Illiteracy and Crime")
symbols ( st$Illiteracy, st$Murder,        #원의 x,y 좌표
circles = st$Population,         #원의 반지름      (인구수가 반지름이 된다)
inches=0.3,                      #원크기 조절값
fg="white",                      #원 테두리 색
bg="Lightgray",                  #원 바탕색
lwd=1.5,                         # 원 테두리선 두께
xlab="rate of Illiteracy",
ylab="crime(murder) rate",
main="Illiteracy and Crime")
symbols ( st$Illiteracy, st$Murder,        #원의 x,y 좌표
circles = st$Population,         #원의 반지름      (인구수가 반지름이 된다)
inches=0.3,                      #원크기 조절값
fg="white",                      #원 테두리 색
bg="Lightgray",                  #원 바탕색
lwd=2,                        # 원 테두리선 두께
xlab="rate of Illiteracy",
ylab="crime(murder) rate",
main="Illiteracy and Crime")
text(st$Illiteracy, st$Murder,           #텍스트출력 x,y 좌표
rownames(st),                       #출력할 text
cex=0.6,                            #폰트크기
col="brown")                        #폰트컬러
symbols ( st$Illiteracy, st$Murder,        #원의 x,y 좌표
circles = st$Population,         #원의 반지름      (인구수가 반지름이 된다)
inches=0.3,                      #원크기 조절값
fg="white",                      #원 테두리 색
bg="Lightgray",                  #원 바탕색
lwd=1.5,                         # 원 테두리선 두께
xlab="rate of Illiteracy",
ylab="crime(murder) rate",
main="Illiteracy and Crime")
text(st$Illiteracy, st$Murder,           #텍스트출력 x,y 좌표
rownames(st),                       #출력할 text
cex=0.6,                            #폰트크기
col="brown")                        #폰트컬러
symbols ( st$Illiteracy, st$Murder,        #원의 x,y 좌표
circles = st$Population,         #원의 반지름      (인구수가 반지름이 된다)
inches=0.3,                      #원크기 조절값
fg="white",                      #원 테두리 색
bg="Lightgray",                  #원 바탕색
lwd=1.5,                         # 원 테두리선 두께
xlab="rate of Illiteracy",
ylab="crime(murder) rate",
main="Illiteracy and Crime")
text(st$Illiteracy, st$Murder,           #텍스트출력 x,y 좌표
rownames(st),                       #출력할 text
cex=0.6,                            #폰트크기
col="brown")                        #폰트컬러
#ggplot 으로 버블차트 그리기
# Libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(viridis)
library(hrbrthemes)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
data
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +          #산점도 그려라
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +                #버블형식의 산점도가 나온다.
theme(legend.position="none")
pp <- ggplotly(p, tooltip="text")
pp
library(KoNLP)
useSejongDic()
setwd("D:/EUNMIN_BIGDATA")
text1 <- readLines("ex_10-1.txt",encoing="UTF-8")
text1 <- readLines("ex_10-1.txt",encoding="UTF-8")
text1
text1_1 <- sapply(text1,extractNoun,USE.NAMES=F)
text1_1
undata1 <- unlist(text1_1_)
undata1 <- unlist(text1_1)
undata1
word_table1 <- table(undata1)
word_table1
undata1_1 <- undata[nchar(undata)>=2]
undata1_1 <- undata1[nchar(undata)>=2]
undata1_1 <- undata1[nchar(undata1)>=2]
undata1_1
word_table1_1 <- table(undata1_1)
word_table1_1
sort(word_table1_1,decreasing=T)
library(wordcloud)
wordcloud(names(word_table1_1,freq=word_table1_1,scale=c(6,0.7),random.order=F)
wordcloud(names(word_table1_1,freq=word_table1_1,scale=c(6,0.7),random.order=F))
wordcloud(names(word_table1_1,freq=word_table1_1,scale=c(6,0.7),random.order=F))
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F)
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F)
undata1_1 <- gsub("그것","",undata1_1))
word_table1
undata1_1 <- undata1[nchar(undata1)>=2]
undata1_1 <- gsub("그것","",undata1_1))
undata1_1 <- gsub("여러분","",undata1_1)
undata1_1 <- gsub("그동안","",undata1_1)
word_table1_1 <- table(undata1_1)
word_table1_1
sort(word_table1_1,decreasing=T)
library(wordcloud)
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F)
undata1_1 <- gsub("국민","",undata1_1)
word_table1_1 <- table(undata1_1)
word_table1_1
sort(word_table1_1,decreasing=T)
library(wordcloud)
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F)
undata1_1 <- undata1[nchar(undata1)>=2]
undata1_1 <- gsub("그것","",undata1_1)
undata1_1 <- gsub("여러분","",undata1_1)
undata1_1 <- gsub("그동안","",undata1_1)
word_table1_1 <- table(undata1_1)
word_table1_1
sort(word_table1_1,decreasing=T)
library(wordcloud)
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F)
pal <- brewer.pal(8,"Dark2")
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F, colors=pal2)
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F, colors=pal)
text1
buildDictionary(ext_dic="useSejongDic",
user_dic=data.frame("더불어민주당","ncn"),       #단어등록을 한 것이다. ncn 은 명사를 뜻 하는 것이다.=> 정치가 명사로 사전에 등재하겠다. 라는 의미
replace_usr_dic=T)
useSejongDic()
undata1 <- unlist(text1_1)
undata1
word_table1 <- table(undata1)
word_table1
undata1_1 <- undata1[nchar(undata1)>=2]
undata1_1 <- gsub("그것","",undata1_1)
undata1_1 <- gsub("여러분","",undata1_1)
undata1_1 <- gsub("그동안","",undata1_1)
word_table1_1 <- table(undata1_1)
word_table1_1
sort(word_table1_1,decreasing=T)
library(wordcloud)
pal <- brewer.pal(8,"Dark2")
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F, colors=pal)
text1_1
##단계 7. 데이터 정렬
sort(word_table1_1,decreasing=T)
library(wordcloud)
pal <- brewer.pal(8,"Dark2")
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F, colors=pal)
word_table1_1
word_table1_1
##단계 7. 데이터 정렬
sort(word_table1_1,decreasing=F)
##단계 7. 데이터 정렬
sort(word_table1_1,decreasing=T)
library(wordcloud)
pal <- brewer.pal(8,"Dark2")
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F, colors=pal)
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F, colors=pal,min.freq = 3)
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F, colors=pal,min.freq = 5)
undata1_1 <- gsub("때문","",undata1_1)
undata1_1 <- gsub("민국","",undata1_1)
word_table1_1 <- table(undata1_1)
word_table1_1
##단계 7. 데이터 정렬
sort(word_table1_1,decreasing=T)
library(wordcloud)
pal <- brewer.pal(8,"Dark2")
wordcloud(names(word_table1_1),freq=word_table1_1,scale=c(6,0.7),random.order=F, colors=pal,min.freq = 5)
##단계 1) 사전 설정 & 자료수집
setwd("D:/EUNMIN_BIGDATA")
text <- readLines("ex_10-4.txt",encoding="UTF-8")
text2 <- readLines("ex_10-4.txt",encoding="UTF-8")
text1 <- readLines("ex_10-1.txt",encoding="UTF-8")
text1
text4 <- readLines("ex_10-4.txt",encoding="UTF-8")
buildDictionary(ext_dic="woorimalsam")
##단계 2) 명사추출
text4_1 <- sapply(text4,extractNoun,USE.NAMES = F)
text4_1
##단계3) 벡터 변환 & 빈도 계산
noun4 <- unlist(text4_1)
noun4
wordcount4 <- table(noun4)
wordcount4
##단계3) 벡터 변환 & 빈도 계산
noun4 <- unlist(text4_1)
table(noun4)
##단계3) 벡터 변환 & 빈도 계산
noun4 <- unlist(text4_1)
noun4
wordcount4 <- table(noun4)
wordcount4
##단계 4) 전처리(생략된 단어를 사전에 등재)
add_word <- c("청강","픽사","자퇴","스탠포드","뜻")
buildDictionary(ext_dic="woorimalsam", user_dic=data.frame(add_word, rep('ncn',length(add_word))),rreplace_usr_dic = T)
buildDictionary(ext_dic="woorimalsam",
user_dic=data.frame(add_word, rep('ncn',length(add_word))),
replace_usr_dic = T)
noun4 <- sapply(text4,extractNoun,USE.NAMES = F)
noun4 <- unlist(noun4)
noun4
class(noun4)
whcih(noun4,"청강")
noun4["청강"]
table(noun4)
##단계 4) 전처리(생략된 단어를 사전에 등재)
add_word <- c("청강","픽사","자퇴","스탠포드","뜻")
buildDictionary(ext_dic="woorimalsam",
user_dic=data.frame(add_word, rep('ncn',length(add_word))),
replace_usr_dic = T)
noun4 <- sapply(text4,extractNoun,USE.NAMES = F)
noun4 <- unlist(noun4)
table(noun4)
table(noun4)
##단계 4) 전처리(생략된 단어를 사전에 등재)
buildDictionary(ext_dic="woorimalsam",
user_dic=data.frame("청강",ncn),
replace_usr_dic = T)
wordcount4
##단계 4) 전처리(생략된 단어를 사전에 등재)
buildDictionary(ext_dic="woorimalsam",
user_dic=data.frame("청강","ncn"),
replace_usr_dic = T)
noun4 <- sapply(text4,extractNoun,USE.NAMES = F)
noun4 <- sapply(text4,extractNoun,USE.NAMES = F)
noun4_4 <- unlist(noun4)
table(noun4)
table(noun4_4)
##단계 4) 전처리(생략된 단어를 사전에 등재)
add_word <- c("청강","픽사","자퇴","스탠포드","뜻")
buildDictionary(ext_dic="woorimalsam",
user_dic=data.frame(add_word, rep('ncn',length(add_word))),
replace_usr_dic = T)
noun4 <- sapply(text4,extractNoun,USE.NAMES = F)
noun4 <- unlist(noun4)
table(noun4)
##단계 5) 전처리(불필요한 단어 삭제)
noun4 <- noun4[nchar(noun2)>1]
##단계 5) 전처리(불필요한 단어 삭제)
noun4 <- noun4[nchar(noun4)>1]
noun4 <- gsub("활자체들간","",noun4)
noun4
table(noun4)
sort(table(noun4))
noun4 <- gsub(c("매킨토시","험이"),"",noun4)
noun4 <- gsub(c("매킨토시","험이"),c("",""),noun4)
name <- c("매킨토시","하루종일")
noun4 <- gsub(name,"",noun4)
noun4 <- gsub("하루종일","",noun4)
noun4 <- gsub("하나","",noun4)
noun4 <- gsub("매킨토시","",noun4)
noun4 <- gsub("하지","",noun4)
noun4 <- gsub("하루종일","",noun4)
noun4 <- gsub("험이","",noun4)
noun4 <- gsub("하나","",noun4)
noun4 <- gsub("매킨토시","",noun4)
##단계 6) word cloud 작성
noun4
noun4 <- unlist(noun4)
noun4
##단계 6) word cloud 작성
noun4
wordcount <- table(noun4)
wordcount
sort.noun <- sort(wordcount,decreasing=T)
wordcount <- table(noun4)
library(wordcloud2)
wordcloud2(wordcount)
wordcloud2(wordcount,minSize = 3)
wordcloud2(wordcount,minSize = 5)
wordcount <- sort(table(noun4))
library(wordcloud2)
wordcount
wordcloud2(wordcount,minSize > 5)
wordcloud2(wordcount, minSize = 5)
wordcloud2(wordcount, minSize = 5)
library(wordcloud2)
help(wordcloud2)
wordcloud(names(wordcount),freq=wordcount,scale=c(6,0.7),random.order=F, colors=pal,min.freq = 5)
wordcloud2(wordcount, minSize = 5)
wordcloud(names(wordcount),freq=wordcount,scale=c(6,0.7),random.order=F, colors=pal,min.freq = 5)
wordcloud(names(wordcount),freq=wordcount,scale=c(6,0.7),random.order=F, colors=pal,min.freq = 4)
noun4 <- gsub("하지","",noun4)
noun4 <- gsub("때문","",noun4)
noun4 <- gsub("여러분","",noun4)
noun4 <- gsub("그때","",noun4)
noun4 <- gsub("그것","",noun4)
##단계 6) word cloud 작성
noun4
wordcount <- sort(table(noun4))
wordcloud(names(wordcount),freq=wordcount,scale=c(6,0.7),random.order=F, colors=pal,min.freq = 4)
noun4 <- gsub("훌륭","",noun4)
noun4 <- gsub("때문","",noun4)
noun4 <- gsub("여러분","",noun4)
noun4 <- gsub("그때","",noun4)
noun4 <- gsub("그것","",noun4)
##단계 6) word cloud 작성
noun4
wordcount <- sort(table(noun4))
wordcloud(names(wordcount),freq=wordcount,scale=c(6,0.7),random.order=F, colors=pal,min.freq = 4)
noun4 <- gsub("개월","",noun4)
noun4 <- gsub("들이","",noun4)
##단계 6) word cloud 작성
noun4
wordcount <- sort(table(noun4))
wordcloud(names(wordcount),freq=wordcount,scale=c(6,0.7),random.order=F, colors=pal,min.freq = 4)
#문제3) 오바마 대통령의 데통령 당선 연설문에 대해 워드클라우드를 작성하시오
#       Tip. 예제소스 파일은 ‘ex_10-5.txt’이다.
##단계 1) 사전 설정 & 자료수집
setwd("D:/EUNMIN_BIGDATA")
text5 <- readLines("ex_10-5.txt",encoding="UTF-8")
buildDictionary(ext_dic="woorimalsam")
##단계 2) 명사추출
text5_1 <- sapply(text5,extractNoun,USE.NAMES = F)
text5_1
##단계3) 벡터 변환 & 빈도 계산
noun5 <- unlist(text5_1)
wordcount5 <- table(noun5)
wordcount5
##단계 4) 전처리(생략된 단어를 사전에 등재)
add_word <- c("호스질","공화당","민주당","우리")
buildDictionary(ext_dic="woorimalsam",
user_dic=data.frame(add_word, rep('ncn',length(add_word))),
replace_usr_dic = T)
noun5 <- sapply(text5,extractNoun,USE.NAMES = F)
noun5 <- unlist(noun5)
##단계 5) 전처리(불필요한 단어 삭제)
noun4 <- noun4[nchar(noun4)>1]
noun4 <- gsub("킹)가","",noun4)
noun4 <- gsub("때문","",noun4)
noun4 <- gsub("여러분","",noun4)
##단계 5) 전처리(불필요한 단어 삭제)
noun5 <- noun4[nchar(noun4)>1]
noun5 <- gsub("킹)가","",noun4)
noun5 <- gsub("때문","",noun4)
noun5 <- gsub("여러분","",noun4)
##단계 6) word cloud 작성
noun5
wordcount <- sort(table(noun5))
wordcloud(names(wordcount),freq=wordcount,scale=c(6,0.7),random.order=F, colors=pal,min.freq = 3)
wordcount <- sort(table(noun5))
wordcount
#문제3) 오바마 대통령의 데통령 당선 연설문에 대해 워드클라우드를 작성하시오
#       Tip. 예제소스 파일은 ‘ex_10-5.txt’이다.
##
library(KoNLP)
useSejongDic()
setwd("D:/EUNMIN_BIGDATA")
setwd("D:/EUNMIN_BIGDATA")
word_data <- readLines("ex_10-5.txt",encoding="UTF-8")
word_data2 <- sapply(word_data,extractNoun,USE.NAMES = F)
word_data2
undata
undata <- unlist( word_data2 )
undata
word_table <- table(undata)
word_table
undata2
undata2 <- undata[nchar(undata)>=2]
undata2
word_table2 <- table(undata2)
word_table2
sort(word_table2,decreasing=T)
sort(word_table2,decreasing=F)
undata2 <- gsub("당신들",undata2)
undata2
undata2 <- gsub("때문", "",undata2)
undata2 <- gsub("들이", "",undata2)
undata2 <- gsub("이것","",undata2)
undata2 <- gsub("당신들","",undata2)
table(undata2)
sort(table(undata2),decreasing = T)
sort(table(undata2),decreasing = F)
buildDictionary(user_dic =
data.frame("미국","ncn",
replace_usr_dic = T))
buildDictionary(user_dic =
data.frame("미국","ncn",
replace_usr_dic = T))
get_dictionary('user_dic')
buildDictionary(user_dic =
data.frame("미국","ncn",
replace_usr_dic = T))
get_dictionary('user_dic')
buildDictionary(user_dic =
data.frame("미국","ncn",
replace_usr_dic = T))
get_dictionary('user_dic')
undata2 <- gsub("당신들","",undata2)
buildDictionary(user_dic = data.frame("미국","ncn",
replace_usr_dic = T))
get_dictionary('user_dic')
buildDictionary(user_dic = data.frame("미국","ncn"),
replace_usr_dic = T)
get_dictionary('user_dic')
sort(table(undata2),decreasing = F)
word_table2 <- sort(table(undata2),decreasing = F)
library(wordcloud2)
wordcloud2(word_table2)
