rowSums(is.na(x))
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
install.packages("dplyr")            #%>% : pipe 연산자 ( 단축기 : 왼쪽 ctrl + 왼쪽 shift + M )
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
install.packages("dplyr")            #%>% : pipe 연산자 ( 단축기 : 왼쪽 ctrl + 왼쪽 shift + M )
install.packages("dplyr")
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
install.packages("dplyr")            #%>% : pipe 연산자 ( 단축기 : 왼쪽 ctrl + 왼쪽 shift + M )
library(dplyr)
rowSums(is.na(ds))
#filter() : 행추출
df %>% filter(class==1)    #df 를 입력해서 filter(class==1) 을 출력한다.
#rename () : 이름변경
df <- rename(df,v1=var1,v2=var2)   #왼쪽이 바뀐 이름 오른쪽이 원래 이름이다
df <- data.frame(var1=c(1,2,1),var2=c(2,3,2))
df
#rename () : 이름변경
df <- rename(df,v1=var1,v2=var2)   #왼쪽이 바뀐 이름 오른쪽이 원래 이름이다
df
#파생변수 추가
df$sum <- df$v1+df$v2
df
df[2,1] <- 5
df
df <- data.frame(id=c(1,2,3,4,5,6),class=c(1,1,1,1,2,2),math=c(50,60,45,30,25,50),english=c(98,97,86,98,80,89),science=c(50,60,78,58,65,98))
df
#filter() : 행추출
df %>% filter(class==1)    #df 를 입력해서 filter(class==1) 을 출력한다.
ds %>% fillter(rowSums(is.na(ds)>=1))
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
rowSums(is.na(ds))
ds %>% fillter(rowSums(is.na(ds)>0))
ds %>% filter(rowSums(is.na(ds)>0))
ds %>% filter(rowSums(is.na(ds)>0))
ds %>% rowSums(is.na(ds)>0))
ds %>% filter(rowSums(is.na(ds)>0)
ds %>% filter(rowSums(is.na(ds)>0))
rowSums(is.na(ds))
#Matrix/Data frame 의 행(data) 별 결측치 확인
rowSums(is.na(x))
sum(rowSums(is.na(x))>0) #결측치가 있는 행이 3개이다
sum(is.na(x))   #행열 구분 없이 결측치 4개 있다
rowSums(is.na(ds))
rowSums(is.na(ds))>0
names(rowSums(is.na(ds))>0)
row.names(rowSums(is.na(ds))>0)
row.names(rowSums(is.na(ds))>0)
rowSums(is.na(ds))>0
rowSums(is.na(ds))
rowSums(is.na(ds))>0
row.names(rowSums(is.na(ds))>0)
names(rowSums(is.na(ds))>0)
#Matrix/Data Frame 결측치 처리
x <- iris
x[1,2] <- NA
x[1,3] <- NA
x[2,3] <- NA
x[3,4] <- NA
head(x)
#Matrix/Data frame 의 행(data) 별 결측치 확인
rowSums(is.na(x))
sum(rowSums(is.na(x))>0) #결측치가 있는 행이 3개이다
sum(is.na(x))   #행열 구분 없이 결측치 4개 있다
#결측치를 제외한 새로운 데이터셋 생성
head(x)
x[!complete.cases(x),] #NA 가 포함된 행출력(! 썼으니까 반대 )           complete.cases(x) 함수를 쓰면 결측치가 포함된 행을 제외시켜준다.
x[!complete.cases(ds),]
ds[!complete.cases(x),]
ds[!complete.cases(ds),]
rowSums(is.na(ds))
#(3) 결측값이 포함된 행은 몇 개인지 출력하시오.
rowSums(is.na(ds))
sum(rowSums(is.na(ds)))
head(ds)
sum(rowSums(is.na(ds)))
#(3) 결측값이 포함된 행은 몇 개인지 출력하시오.
rowSums(is.na(ds))
#(1) 각 열별로 결측값이 몇 개인지 출력하시오.
na_count <- apply(ds,2,function(y) sum(is.na(y)))
na_count
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
head(ds)
#(1) 각 열별로 결측값이 몇 개인지 출력하시오.
na_count <- apply(ds,2,function(y) sum(is.na(y)))
na_count
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
ds[!complete.cases(ds),]
#(3) 결측값이 포함된 행은 몇 개인지 출력하시오.
rowSums(is.na(ds))
sum(rowSums(is.na(ds))>0)
rowSums(is.na(ds))>0
#(4) 결측값이 포함된 행들을 제외하고 새로운 데이터셋 ds.new를 만들어보시오.
ds.new <- ds[complete.cases(ds),]
ds.new
st <- data.frame(state.x77)
head(st)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st$Population)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st$Population)
boxplot(st$Income)
boxplot(st$Illiteracy)
boxplot(st$Life.Exp)
boxplot(st$Murder)
boxplot(st$HS.Grad)
boxplot(st$Frost)
boxplot(st$Area)
boxplot(st)
#(2) 특이값이 존재하는 경우 이상치를 NA로 대체하여 저장하시오.
out.val <- boxplot.stats(st$Population)$out
out.val
st$Population[st$Population %in% out.val ] <- NA
head(st)
for(i in c(1,2,8)) {
out.val <- boxplot.stats(st[,i])$out
st[,i][st[,i] %in% out.val ] <- NA
}
head(st)
st <- data.frame(state.x77)
head(st)
out.val <- boxplot.stats(st$Population)$out
out.val
out.val <- boxplot.stats(st$Area)$out
out.val
for(i in c(1,2,8)) {
out.val <- boxplot.stats(st[,i])$out
st[,i][st[,i] %in% out.val ] <- NA
}
head(st)
#(3) 결측값이 포함된 행은 몇 개인지 출력하시오.
rowSums(is.na(ds))
rowSums(is.na(ds))>0
st <- data.frame(state.x77)
for(i in c(1,2,8)) {
out.val <- boxplot.stats(st[,i])$out
st[,i][st[,i] %in% out.val ] <- NA
}
head(st)
#(3) st에서 NA가 존재하는 행들을 제거하여 st2에 저장하시오.
st2 <- st[complete.cases(st)]
#(3) st에서 NA가 존재하는 행들을 제거하여 st2에 저장하시오.
st2 <- st[complete.cases(st),]
head(st2)
#(1) airquality를 AQ에 저장하시오.
head(airquality)
na_count <- apply(x,2,col_na)
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
col_na <- function(y){
return(sum(is.na(y)))
}
na_count <- apply(x,2,col_na)
na_count
na_count <- apply(AQ,2,col_na)
na_count
#(1) airquality를 AQ에 저장하시오.
AQ <- airquality
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
col_na <- function(y){
return(sum(is.na(y)))
}
na_count <- apply(AQ,2,col_na)
na_count
na_count <- apply(AQ,2,function(y) sum(is.na(y)))
na_count
is.na(AQ)
sum(is.na(AQ))
rowSums(is.na(AQ))
rowSums(is.na(AQ))>0
dim(AQ)
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
col_na <- function(y){
return(sum(is.na(y)))
}
na_count <- apply(AQ,2,col_na)
na_count
#(1) airquality를 AQ에 저장하시오.
AQ <- airquality
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
col_na <- function(y){
return(sum(is.na(y)))
}
na_count <- apply(AQ,2,col_na)
na_count
head(AQ)
#(3) AQ에서 행별로 NA의 개수를 출력하시오.
na_count2 <- apply(AQ,1,col_na)
na_count2
head(AQ)
#(4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
AQ[complete.cases(AQ),]
head(AQ)
head(AQ)
head(AQ,10)
#(4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
had(AQ[complete.cases(AQ),],10)
#(4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
head(AQ[complete.cases(AQ),],10)
head(AQ)
is.na(AQ)
AQ[is.na(AQ)==TRUE]
AQ[is.na(AQ) == TRUE] <-3
head(AQ)
#(1) airquality를 AQ에 저장하시오.
AQ <- airquality
head(AQ)
for(i in ncol(AQ)) {
AQ[is.na(AQ) == TRUE] <- colMeans(i)
}
AQ[is.na(AQ) == TRUE] <- colMeans(,i)
for(i in ncol(AQ)) {
AQ[is.na(AQ) == TRUE] <- colMeans(,i)
}
for(i in ncol(AQ)) {
AQ[is.na(AQ) == TRUE] <- colMeans(AQ)
}
apply(AQ,2,mean)
apply(AQ,2,mean,na.rm=T)
for(i in ncol(AQ)) {
AQ[is.na(AQ) == TRUE] <- apply(AQ,2,mean,na.rm=T)
}
#(4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
AQ[complete.cases(AQ),]
#(4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
s <- AQ[complete.cases(AQ),]
apply(s,2,mean)
apply(AQ,2,mean,na.rm=T)
AQ[is.na(AQ) == TRUE] <- apply(AQ[complete.cases(AQ),],2,mean)
apply(AQ[complete.cases(AQ),],2,mean)
AQ[is.na(AQ) == TRUE] <- apply(AQ[complete.cases(AQ),],2,mean)
AQ[is.na(AQ) == TRUE]
ncol(AQ)
for(i in ncol(AQ)){
AQ[,i][is.na(AQ)==TRUE]<-apply(AQ[complete.cases(AQ),],2,mean)
}
apply(AQ[complete.cases(AQ),],2,mean)
for(i in ncol(AQ)){
AQ[,i][is.na(AQ)==TRUE] <- apply(AQ[complete.cases(AQ),],2,mean)[,i]
}
apply(AQ[complete.cases(AQ),],2,mean)[,i]
apply(AQ[complete.cases(AQ),],2,mean)
apply(AQ[complete.cases(AQ),],2,mean)["Ozone"]
apply(AQ[complete.cases(AQ),],2,mean)[,i]
apply(AQ[complete.cases(AQ),],2,mean)[i
apply(AQ[complete.cases(AQ),],2,mean)[i]
apply(AQ[complete.cases(AQ),],2,mean)[,1]
apply(AQ[complete.cases(AQ),],2,mean)[,1]
apply(AQ[complete.cases(AQ),],2,mean)
apply(AQ[complete.cases(AQ),],2,mean)$Ozone
apply(AQ[complete.cases(AQ),],2,mean)[,1]
apply(AQ[complete.cases(AQ),],2,mean)[1]
AQ[,i][is.na(AQ)==TRUE] <- apply(AQ[complete.cases(AQ),],2,mean)[i]
for(i in ncol(AQ)){
AQ[,i][is.na(AQ)==TRUE] <- apply(AQ[complete.cases(AQ),],2,mean)[i]
}
apply(AQ[complete.cases(AQ),],2,mean)[1]
AQ[,1][is.na(AQ)==TRUE]
AQ$Ozone
is.na(AQ$Ozone)
is.na(AQ[,1])
is.na(AQ[,1])==TRUE
is.na(AQ[,1])==TRUE
AQ[,1][is.na(AQ)==TRUE]
is.na(AQ[,1])
for(i in ncol(AQ)){
if(is.na(AQ[,i])==TRUE) {
TRUE <- apply(AQ[complete.cases(AQ),],2,mean)[i]
}
}
for(i in ncol(AQ)){
if(is.na(AQ[,1])==TRUE) {
TRUE <- apply(AQ[complete.cases(AQ),],2,mean)[1]
}
}
apply(AQ[complete.cases(AQ),],2,mean)[1]
is.na(AQ[,1])
for(i in ncol(AQ)){
AQ[,i][is.na(AQ[,i])==TRUE] <- apply(AQ[complete.cases(AQ),],2,mean)[i]
}
#(1) airquality를 AQ에 저장하시오.
AQ <- airquality
head(AQ)
a <- apply(AQ[complete.cases(AQ),],2,mean)[1]   #NA 를 제거한 후 열의 평균값들
a
for(i in ncol(AQ)){
AQ[,i][is.na(AQ[,i])==TRUE] <- apply(AQ[complete.cases(AQ),],2,mean)[i]
}
AQ
AQ <- airquality
head(AQ)
apply(AQ[complete.cases(AQ),],2,mean)[1]
for(i in ncol(AQ)){
AQ[,i][is.na(AQ[,i])==TRUE] <- apply(AQ[complete.cases(AQ),],2,mean)[i]
}
head(AQ)
is.na(AQ[,1])                                   #NA 면 TRUE 로 표시
apply(AQ[complete.cases(AQ),],2,mean)[1]
for(i in ncol(AQ)){
AQ[,i][is.na(AQ[,i])==TRUE] <- apply(AQ[complete.cases(AQ),],2,mean)[i]
}
head(AQ)
AQ <- airquality
head(AQ)
for(i in nol(AQ)){
apply(AQ[complete.cases(AQ),],2,mean)[i]
}
for(i in ncol(AQ)){
apply(AQ[complete.cases(AQ),],2,mean)[i]
}
a <- for(i in ncol(AQ)){
apply(AQ[complete.cases(AQ),],2,mean)[i]
}
a
a <- for(i in 6){
apply(AQ[complete.cases(AQ),],2,mean)[i]
}
a
a <- apply(AQ[complete.cases(AQ),],2,mean)[1]
a
apply(AQ[complete.cases(AQ),],2,mean)
a
a <- for(i in 6){
apply(AQ[complete.cases(AQ),],2,mean)[i]
}
a
for(i in ncol(AQ)){
AQ[,i][is.na(AQ[,i])==TRUE] <- apply(AQ[complete.cases(AQ),],2,mean)[1]
}
head(AQ)
for(i in ncol(AQ)){
AQ[,i][is.na(AQ[,i])==TRUE] <- apply(AQ[complete.cases(AQ),],2,mean)[1]
}
head(AQ)
for(i in ncol(AQ)){
AQ[,i][is.na(AQ[,i])==TRUE] <- apply(AQ[complete.cases(AQ),],2,mean)[1]
}
head(AQ)
AQ[,1][is.na(AQ[,1])==TRUE]
is.na(AQ[,1])==TRUE
subset(AQ,is.na(AQ[,1])==TRUE)
subset(AQ,is.na(AQ[,1])==TRUE)[,1]
#(1) state.x77 데이터셋을 Population(인구수)를 기준으로 오름차순 정렬하시오.
install.packages("dplyr")
#(1) state.x77 데이터셋을 Population(인구수)를 기준으로 오름차순 정렬하시오.
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
set <- state.x77
head(set)
set %>% arrange(Population)
set %>% arrange(Population)
set <- state.x77
set %>% arrange(Population)
set <- data.frame(state.x77)
set %>% arrange(Population)
set <- data.frame(state.x77)
set1 <- set %>% arrange(Population)
set1
dim(set)
#(2) state.x77 데이터셋을 Income(소득)을 기준으로 내림차순 정렬하시오.
set
set <- data.frame(state.x77)
set[order(set$Population,)]
set[order(set$Population),]
set1
set[order(state.x77$Population),]
set[order(state.x77$Population),]
set[order(set$Population),]
state.x77[order(state.x77$Population),]
state.x77[order(state.x77$Population),]
set[order(set$Population),]
set[order(set$Income,decreasing=T)]
set[order(set$Income,decreasing=T),]
set[order(set$Illiteracy),]
set[order(set$Illiteracy),]$Illiteraycy
set[order(set$Illiteracy),]$Illiteracy
set[order(set$Illiteracy),][,3]
set[order(set$Illiteracy),]
subset(set[order(set$Illiteracy),],3)
set[order(set$Illiteracy),]
head(set[order(set$Illiteracy),],10)
set %>% arrange(Illiteracy) %>%
select(Illiteracy)
set %>% arrange(Illiteracy) %>%
select(Illiteracy) %>%
head(10)
head(set[order(set$Illiteracy),],10)
head(set[order(set$Illiteracy),],10)[,3]
set %>% arrange(Illiteracy) %>%
select(Illiteracy) %>%
head(10)
head(set[order(set$Illiteracy),],10)
head(set[order(set$Illiteracy),],10)[,3]
head(set[order(set$Illiteracy),],10)$Illiteracy
head(set[order(set$Illiteracy),][,3],10)
set[order(set$Illiteracy),]
set[order(set$Illiteracy),][,3]
head(set[order(set$Illiteracy),],10)
head(set[order(set$Illiteracy),][,3],10)
head(set[order(set$Illiteracy),],10)
class(head(set[order(set$Illiteracy),],10))
as.matrix(head(set[order(set$Illiteracy),],10))
as.matrix(head(set[order(set$Illiteracy),],10))[,3]
head(set[order(set$Illiteracy),],10)
as.matrix(head(set[order(set$Illiteracy),],10))[,3]
as.matrix(head(set[order(set$Illiteracy),],10))[,3]
#(1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하시오.(단, split() 함수를 사용)
mt.gear <- split(mtcars,mtcars$gear)
mt.gear
#문제5) R에서 제공하는 mtcars 데이터셋에 대하여 다음 문제를 해결하기 위한 R코드를 작성하시오.
head(mtcars)
#문제5) R에서 제공하는 mtcars 데이터셋에 대하여 다음 문제를 해결하기 위한 R코드를 작성하시오.
mtcars$gear
#문제5) R에서 제공하는 mtcars 데이터셋에 대하여 다음 문제를 해결하기 위한 R코드를 작성하시오.
#(1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하시오.(단, split() 함수를 사용)
mt.gear <- split(mtcars,mtcars$gear)
mt.gear
#(2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
mt.gear$`4`
#7. 데이터 병합
x <- data.frame(name=c("a","b","c"),mat=c(90,80,40))
y <- data.frame(name=c("a","b","d"),korean=c(75,60,90))
z <- merge(x,y,by=c("name"))   #merge 는 합친다. 공통변수 name 에 같은 값들만 나옴
z
merge(x,y,all=T)
#(3) mt.gear에서 gear(기어)의 개수가 3인 그룹과 5인 그룹의 데이터를 합쳐서 mt.gear.35에 저장하고 내용을 출력하시오.
mt.gear.35 <- data.frame(mt.gear$'3',mt.gear$`5`)
mt.gear.35
#(3) mt.gear에서 gear(기어)의 개수가 3인 그룹과 5인 그룹의 데이터를 합쳐서 mt.gear.35에 저장하고 내용을 출력하시오.
mt.gear.35 <-bind_rows(mt.gear$'3',mt.gear$`5`)
mt.gear.35
mt.gear
mt.gear.35
merge(mt.gear$`3`,mt.gear$`5`)
mt.gear.35 <-bind_rows(mt.gear$'3',mt.gear$`5`)
mt.gear.35
mt.gear
mtcars %>% filter(wt>=1.5&wt<=3)
authors <- data.frame( surname = c( "Twein", "Venables", "Tierney", "Ripley", "McNeil" ),
nationality = c( "US", "Australia", "US", "UK", "Australia" ),
retired = c( "yes", rep( "no", 4 ) ) )
authors
books <- data.frame( name = c( "Johns", "Venables", "Tierney", "Ripley", "Ripley", "McNeil" ),
title = c( "Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis" ),
other.author = c( NA, "Ripley", NA, NA, NA, NA ) )
books
authors
books
x <- data.frame(name=c("a","b","c"),mat=c(90,80,40))
y <- data.frame(sname=c("a","b","d"),korean=c(75,60,90))
merge( x, y, by.x = c("name"), by.y = c("sname" ))
#(1) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하시오(두 데이터프레임에서 공통 열의 값이 일치하는 것들만 병합).
merge(authors,books,by.x=c("surname"),by.y=c("name"))
authors
books
#(1) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하시오(두 데이터프레임에서 공통 열의 값이 일치하는 것들만 병합).
merge(authors,books,by.x=c("surname"),by.y=c("name"))
#(2) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 authors의 행들이 모두 표시되도록 하시오.
#(2) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 authors의 행들이 모두 표시되도록 하시오.
#(3) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 books의 행들은 모두 표시되도록 하시오.
x <- data.frame(name=c("a","b","c"),mat=c(90,80,40))
y <- data.frame(name=c("a","b","d"),korean=c(75,60,90))
z <- merge(x,y,by=c("name"))   #merge 는 합친다. 공통변수 name 에 같은 값들만 나옴
z
#7. 데이터 병합
x <- data.frame(name=c("a","b","c"),mat=c(90,80,40))
y <- data.frame(name=c("a","b","d"),korean=c(75,60,90))
merge(x,y)
merge(x,y,all.x=T)
merge(authors,books,by.x=c("surname"),by.y=c("name"),all.x=T)
authors
books
merge(authors,books,by.x=c("surname"),by.y=c("name"),all.x=T)
#(1) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하시오(두 데이터프레임에서 공통 열의 값이 일치하는 것들만 병합).
merge(authors,books,by.x=c("surname"),by.y=c("name"))
r
merge(authors,books,by.x=c("surname"),by.y=c("name"),all.x=T)
#(2) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 authors의 행들이 모두 표시되도록 하시오.
merge(authors,books,by.x=c("surname"),by.y=c("name"),all.authors=T)
#(3) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 books의 행들은 모두 표시되도록 하시오.
merge(authors,books,by.x=c("surname"),by.y=c("name"),all.y = =T)
#(3) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 books의 행들은 모두 표시되도록 하시오.
merge(authors,books,by.x=c("surname"),by.y=c("name"),all.y =T)
authors
books
#(1) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하시오(두 데이터프레임에서 공통 열의 값이 일치하는 것들만 병합).
merge(authors,books,by.x=c("surname"),by.y=c("name"))
#(3) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 books의 행들은 모두 표시되도록 하시오.
merge(authors,books,by.x=c("surname"),by.y=c("name"),all.y =T)
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(authros,books,by.x=c("surname"),by.y=c("other.author"))
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(authros,books,by.x=c("surname"),by.y=c("other.author"))
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(authro,books,by.x=c("surname"),by.y=c("other.author"))
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(author,books,by.x=c("surname"),by.y=c("other.author"))
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(authors,books,by.x=c("surname"),by.y=c("other.author"))
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(authors,books,by.x=c("surname"),by.y=c("other.author"),all = T)
